generator client {
    provider = "prisma-client-js"
    output   = "../generated/nook"
}

datasource db {
    provider = "postgresql"
    url      = env("NOOK_DATABASE_URL")
}

model User {
    fid          String   @id
    signedUpAt   DateTime
    loggedInAt   DateTime
    refreshToken String
    siwfData     Json
    theme        String   @default("mauve")

    metadata Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    nooks   NookMembership[]
    actions UserCastAction[]
}

model NookMembership {
    fid    String
    nookId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [fid], references: [fid])
    nook Nook @relation(fields: [nookId], references: [id], onDelete: Cascade)

    @@id([fid, nookId])
}

model Nook {
    id          String  @id @default(uuid())
    creatorFid  String
    name        String
    description String?
    imageUrl    String?
    visibility  String
    metadata    Json

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?

    members NookMembership[]
    shelves ShelfInstance[]
}

model Feed {
    id         String @id @default(uuid())
    type       String
    creatorFid String
    hash       String @unique
    filter     Json

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model List {
    id          String  @id @default(uuid())
    creatorFid  String
    name        String
    description String?
    type        String
    imageUrl    String?
    visibility  String

    items ListItem[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?
}

model ListItem {
    listId String
    id     String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    list List @relation(fields: [listId], references: [id])

    @@id([listId, id])
}

model Shelf {
    id          String  @id @default(uuid())
    creatorFid  String
    name        String
    description String?
    imageUrl    String?

    protocol  String
    type      String
    api       String
    form      Json
    renderers String
    tags      String?

    enabled Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?

    instances ShelfInstance[]

    @@unique([creatorFid, name])
}

model ShelfInstance {
    id          String  @id @default(uuid())
    nookId      String
    creatorFid  String
    name        String
    description String?
    imageUrl    String?

    shelfId  String
    type     String
    renderer String
    data     Json

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?

    nook  Nook  @relation(fields: [nookId], references: [id], onDelete: Cascade)
    shelf Shelf @relation(fields: [shelfId], references: [id])
}

model NookTemplate {
    id          String  @id @default(uuid())
    creatorFid  String
    name        String  @unique
    description String?
    imageUrl    String?

    form Json

    enabled Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?
}

model Cashtag {
    cashtag     String  @id
    name        String?
    description String?
    imageUrl    String?
    channelId   String?

    chainId String?
    address String?

    coingeckoId String?
    priceUsd    Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model UserCastAction {
    fid   String
    index Int

    actionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user   User       @relation(fields: [fid], references: [fid])
    action CastAction @relation(fields: [actionId], references: [id], onDelete: Cascade)

    @@id([fid, index])
}

model CastAction {
    id         String @id @default(uuid())
    actionType String
    postUrl    String

    name       String
    icon       String
    creatorFid String?
    hidden     Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    users UserCastAction[]

    @@unique([actionType, postUrl])
}
