generator client {
    provider = "prisma-client-js"
    output   = "../generated/notifications"
}

datasource db {
    provider = "postgresql"
    url      = env("NOTIFICATION_DATABASE_URL")
}

model User {
    fid            String  @id
    token          String
    disabled       Boolean @default(false)
    receive        Boolean @default(false)
    onlyPowerBadge Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subscriptions ShelfNotificationSubscription[]
}

model Notification {
    fid       String
    service   String
    type      String
    sourceId  String
    sourceFid String
    timestamp DateTime
    data      Json?
    read      Boolean  @default(false)

    powerBadge Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@id([fid, service, type, sourceId])
    @@index([fid, read])
    @@index([fid, timestamp, type])
    @@index([timestamp(sort: Desc), powerBadge, type])
    @@index([sourceFid, timestamp(sort: Desc), type])
}

model ShelfNotification {
    shelfId String @id

    includeReplies Boolean @default(false)
    onlyReplies    Boolean @default(false)
    powerBadge     Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users         ShelfNotificationUserTopic[]
    parentUrls    ShelfNotificationParentUrlTopic[]
    keywords      ShelfNotificationKeywordTopic[]
    embedUrls     ShelfNotificationEmbedUrlTopic[]
    mutedKeywords ShelfNotificationMutedKeywordTopic[]

    subscriptions ShelfNotificationSubscription[]
}

model ShelfNotificationUserTopic {
    shelfId String
    fid     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelfNotification ShelfNotification @relation(fields: [shelfId], references: [shelfId], onDelete: Cascade)

    @@id([shelfId, fid])
}

model ShelfNotificationParentUrlTopic {
    shelfId String
    url     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelfNotification ShelfNotification @relation(fields: [shelfId], references: [shelfId], onDelete: Cascade)

    @@id([shelfId, url])
}

model ShelfNotificationKeywordTopic {
    shelfId String
    keyword String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelfNotification ShelfNotification @relation(fields: [shelfId], references: [shelfId], onDelete: Cascade)

    @@id([shelfId, keyword])
}

model ShelfNotificationEmbedUrlTopic {
    shelfId String
    url     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelfNotification ShelfNotification @relation(fields: [shelfId], references: [shelfId], onDelete: Cascade)

    @@id([shelfId, url])
}

model ShelfNotificationMutedKeywordTopic {
    shelfId String
    keyword String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelfNotification ShelfNotification @relation(fields: [shelfId], references: [shelfId], onDelete: Cascade)

    @@id([shelfId, keyword])
}

model ShelfNotificationSubscription {
    shelfId String
    fid     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelfNotification ShelfNotification @relation(fields: [shelfId], references: [shelfId], onDelete: Cascade)
    user              User              @relation(fields: [fid], references: [fid])

    @@id([shelfId, fid])
}
